knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(GGally)
library(ggradar)
library(ggiraphExtra)
library(converse)
data('dailydialog', package = 'converse')
data('mine_to_dailydialog', package = 'converse')
data('our_updated', package = 'converse')
alldata <- rbind(dailydialog, our_updated, mine_to_dailydialog)
alldata %>% group_by(source) %>% count()
#Descriptive statistics
stats <- data.frame(alldata %>%
group_by(source) %>%
summarise(mean_dim1 = mean(dim_1),
sd_dim1 = sd(dim_1),
mean_dim2 = mean(dim_2),
sd_dim2 = sd(dim_2),
mean_dim3 = mean(dim_3),
sd_dim3 = sd(dim_3),
mean_dim4 = mean(dim_4),
sd_dim4 = sd(dim_4),
mean_dim5 = mean(dim_5),
sd_dim5 = sd(dim_5),
))
stats
#per source
dim_radar_mean_guide <- data.frame(group = c("dailydialog", "FLG", "FLG_mod"),
dim_1 = c(stats$mean_dim1),
dim_2 = c(stats$mean_dim2),
dim_3 = c(stats$mean_dim3),
dim_4 = c(stats$mean_dim4),
dim_5 = c(stats$mean_dim5))
g <- ggRadar(data=dim_radar_mean_guide, aes(color=group)) +  ggtitle("Mean - Tour Guide")
#ggsave(g, file="plot.png")
g
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ source, data = alldata)
summary(fit, test = "Wilks")
summary.aov(fit)
etasq(fit, test="Wilks")
#Pairwaise manova
emmeans::emmeans(fit,pairwise~individual, data = alldata)
#Pairwaise manova
emmeans::emmeans(fit,pairwise~source, data = alldata)
dd2flg <- alldata %>% filter(source != "translation")
dd2flg %>% group_by(source) %>% count()
dd_flg <- alldata %>% filter(source != "translation")
library(ggplot2)
library(dplyr)
library(gridExtra)
library(GGally)
library(ggradar)
library(ggiraphExtra)
library(converse)
data('dailydialog', package = 'converse')
data('mine_to_dailydialog', package = 'converse')
data('our_updated', package = 'converse')
alldata <- rbind(dailydialog, our_updated, mine_to_dailydialog)
alldata %>% group_by(source) %>% count()
dd_flg <- alldata %>% filter(source != "translation")
dd_flg %>% group_by(source) %>% count()
#Model that compares DailyDialog to FLG (orignal data)
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ source, data = dd_flg)
summary(fit, test = "Wilks")
summary.aov(fit)
#Pairwaise manova
emmeans::emmeans(fit,pairwise~source, data = alldata)
#Pairwaise manova
emmeans::emmeans(fit,pairwise~source, data = dd_flg)
summary(fit, test = "Wilks")
summary.aov(fit)
#Model that compares DailyDialog to FLG (orignal data)
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ individual, data = dd_flg)
summary(fit, test = "Wilks")
summary.aov(fit)
emmeans::emmeans(fit,pairwise~source, data = dd_flg)
emmeans::emmeans(fit,pairwise~individual, data = dd_flg)
#Model that compares DailyDialog to FLG (orignal data)
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ source, data = dd_flg)
summary(fit, test = "Wilks")
summary.aov(fit)
dd_flg_mod <- alldata %>% filter(source != "our")
dd_flg_mod %>% group_by(source) %>% count()
#Model that compares DailyDialog to FLG (orignal data)
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ source, data = dd_flg)
summary(fit, test = "Wilks")
summary.aov(fit)
#Model that compares DailyDialog to FLG_mod (modified data)
fit <- manova(cbind(dim_1, dim_2, dim_3, dim_4, dim_5) ~ source, data = dd_flg_mod)
summary(fit, test = "Wilks")
summary.aov(fit)
set.seed(36) #reproducible results
library(vegan)
dim.div <- adonis(dimensions[,3:7]~individual, data=dimensions, method="euclidean", permutations = 10000)
View(dd_flg)
dim <- dd_flg %>% select(individual, source, dim_1, dim_2, dim_3, dim_4, dim_5)
library(vegan)
dim.div <- adonis(dim[,3:7]~source, data=dd_flg, method="euclidean", permutations = 10000)
dim.div <- adonis(dim[,3:7]~source, data=dd_flg, method="euclidean", permutations = 10000)
set.seed(36)
#p
dim.div$aov.tab
dim <- dd_flg_mod %>% select(individual, source, dim_1, dim_2, dim_3, dim_4, dim_5)
dim.div <- adonis(dim[,3:7]~source, data=dd_flg_mod, method="euclidean", permutations = 10000)
dim.div$aov.tab
library(RVAideMemoire)
set.seed(36)
set.seed(36)
perContrast <- pairwise.perm.manova(dim[,3:7], dim$source, nperm=10000, test="Hotelling-Lawley")
perContrast
dim <- dd_flg %>% select(individual, source, dim_1, dim_2, dim_3, dim_4, dim_5)
library(vegan)
set.seed(36) #reproducible results
dim.div <- adonis(dim[,3:7]~source, data=dd_flg, method="euclidean", permutations = 10000)
dim_1.model <- lm(dimensions$dim_1~individual, data=dimensions)
dim_1.model <- lm(dd_flg$dim_1~source, data=dimensions)
dim_1.model <- lm(dim_1~source, data=dd_flg)
summary(dim_1.model)
dim_1.model <- lm(dim_1~source, data=dd_flg_mod)
summary(dim_1.model)
dim_1.model <- lm(dim_1~source, data=dd_flg)
summary(dim_1.model)
dim_1.model <- lm(dim_1~source, data=dd_flg_mod)
summary(dim_1.model)
dim_1.model <- lm(dim_1~source, data=dd_flg)
summary(dim_1.model)
dim_1.model <- lm(dim_1~source, data=dd_flg_mod)
summary(dim_1.model)
letterdata <- dim_1.model %>%
emmeans::emmeans( ~ individual) %>%
emmeans::cld( Letters=letters) %>%
dplyr::select(individual, .group) %>%
dplyr::mutate( dim_1 = 70 )
letterdata <- dim_1.model %>%
emmeans::emmeans( ~ source) %>%
emmeans::cld( Letters=letters) %>%
dplyr::select(source, .group) %>%
dplyr::mutate( dim_1 = 70 )
ggplot(data=dd_flg_mod, aes(x=source, y=dim_1)) +
geom_boxplot()
dim_3.model <- lm(dim_3~source, data=dd_flg)
summary(dim_1.model)
dim_3.model <- lm(dim_3~source, data=dd_flg_mod)
summary(dim_3.model)
dim_3.model <- lm(dim_3~source, data=dd_flg)
summary(dim_1.model)
dim_3.model <- lm(dim_3~source, data=dd_flg_mod)
summary(dim_3.model)
library(ggplot2)
library(dplyr)
library(ggradar)
library(ggiraphExtra)
library(converse)
data('dailydialog', package = 'converse')
data('mine_to_dailydialog', package = 'converse')
data('our_updated', package = 'converse')
alldata <- rbind(dailydialog, our_updated, mine_to_dailydialog)
alldata %>% group_by(source) %>% count()
dd_flg <- alldata %>% filter(source != "translation")
dd_flg_mod <- alldata %>% filter(source != "our")
dd_flg_mod %>% group_by(source) %>% count()
alldata %>% group_by(source) %>% count()
dd_flg <- alldata %>% filter(source != "translation")
dd_flg_mod <- alldata %>% filter(source != "our")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(surveystats)
library(ggplot2)
library(rcompanion) #for groupwisePercentile() function
library(lme4) #for mixed effect model lmer()
library(lmerTest) #interface for lme4 that shows the pvalues
library(latex2exp)  # for LaTeX mathematical notation
data("content.preservation")
data("naturalness")
data("nat.sum")
#calculating the .25 lower quantile
grp.quantile <- groupwisePercentile(score ~ question, bca=FALSE, tau=.25, data = content.preservation)
grp.quantile <- grp.quantile %>%
select(question, Percentile)
#density plot with cutting line
g <- ggplot(content.preservation, aes(x = score))+
geom_density(show.legend = FALSE)+
facet_wrap(question~.,ncol = 9)+
geom_vline(data=grp.quantile, aes(xintercept=Percentile), #percentile line is blue (should be to the right)
colour="blue", show.legend = FALSE)+
geom_vline(aes(xintercept=75),                            #cut off line is red
colour="tomato", linetype="dashed", show.legend = FALSE)+
theme_bw()+theme(panel.spacing=grid::unit(0, "lines"))
g
knitr::opts_chunk$set(echo = TRUE)
length(unique(content.preservation$pid))
#calculating the .25 lower quantile
grp.quantile <- groupwisePercentile(score ~ question, bca=FALSE, tau=.25, data = content.preservation)
grp.quantile <- grp.quantile %>%
select(question, Percentile)
#density plot with cutting line
g <- ggplot(content.preservation, aes(x = score))+
geom_density(show.legend = FALSE)+
facet_wrap(question~.,ncol = 9)+
geom_vline(data=grp.quantile, aes(xintercept=Percentile), #percentile line is blue (should be to the right)
colour="blue", show.legend = FALSE)+
geom_vline(aes(xintercept=75),                            #cut off line is red
colour="tomato", linetype="dashed", show.legend = FALSE)+
theme_bw()+theme(panel.spacing=grid::unit(0, "lines"))
g
model <- lmer(score ~ 1 + (1|question) + (1|pid), data=content.preservation)
summary(model)
ranef(model)
#ranef(model) #estimates for question and pid
ranova(model)
LetterResults <- emmeans::emmeans( model, ~ 1) %>%
multcomp::cld(Letters=letters)
LetterResults
content.preservation %>%
group_by(question) %>%
summarise(n=n()) %>%
arrange(n)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(surveystats)
library(ggplot2)
library(rcompanion) #for groupwisePercentile() function
library(lme4) #for mixed effect model lmer()
library(lmerTest) #interface for lme4 that shows the pvalues
library(latex2exp)  # for LaTeX mathematical notation
data("content.preservation")
data("naturalness")
data("nat.sum")
library(dplyr)
library(surveystats)
library(ggplot2)
library(rcompanion) #for groupwisePercentile() function
library(lme4) #for mixed effect model lmer()
library(lmerTest) #interface for lme4 that shows the pvalues
library(latex2exp)  # for LaTeX mathematical notation
data("content.preservation")
data("naturalness")
data("nat.sum")
#calculating the .25 lower quantile
grp.quantile <- groupwisePercentile(score ~ question, bca=FALSE, tau=.25, data = content.preservation)
grp.quantile <- grp.quantile %>%
select(question, Percentile)
#density plot with cutting line
g <- ggplot(content.preservation, aes(x = score))+
geom_density(show.legend = FALSE)+
facet_wrap(question~.,ncol = 9)+
geom_vline(data=grp.quantile, aes(xintercept=Percentile), #percentile line is blue (should be to the right)
colour="blue", show.legend = FALSE)+
geom_vline(aes(xintercept=75),                            #cut off line is red
colour="tomato", linetype="dashed", show.legend = FALSE)+
theme_bw()+theme(panel.spacing=grid::unit(0, "lines"))
g
model <- lmer(score ~ 1 + (1|question) + (1|pid), data=content.preservation)
summary(model)
#random effects
ranova(model)
LetterResults <- emmeans::emmeans( model, ~ 1) %>%
multcomp::cld(Letters=letters)
LetterResults
content.preservation %>%
group_by(question) %>%
summarise(n=n()) %>%
arrange(n)
cp.plot <- content.preservation %>%
mutate( y.hat.question   = predict(model, re.form= ~ (1|question)),  # Include question Random effect
y.hat.question   = round( y.hat.question, digits=2),
y.hat.pid        = predict(model, re.form= ~ (1|pid)),  # Include pid Random effect
y.hat.pid        = round( y.hat.pid, digits=2),)
#creating the plot por every question
ggplot(cp.plot, aes(y = score, x=question)) +
geom_point() +
theme(legend.position="top",
legend.text = element_text(size=4),
legend.title = element_blank(),
legend.key.size = unit(.4,"line")) +
guides(col = guide_legend(ncol = 8)) + #this line is not working
geom_hline(aes(yintercept=y.hat.pid),                            #random effect of pid is red
color="tomato", linetype="dashed", show.legend = FALSE) +
facet_wrap(. ~ pid, ncol = 14, labeller = label_both) +
geom_hline(aes(yintercept=y.hat.question),                            #random effect of pid is blue
color="blue", linetype="dashed", show.legend = FALSE)
#boxplot with all the items per question, separate into original vs. translated
ggplot(naturalness, aes(y=score, x=item, fill=group))+
facet_wrap(. ~ question, ncol=10)+
geom_boxplot()+ theme(legend.position="top")
#overall stats
summary(naturalness)
#boxplot with all the items per question, separate into original vs. translated
ggplot(naturalness, aes(y=score, x=item, fill=group))+
facet_wrap(. ~ question, ncol=10)+
geom_boxplot()+ theme(legend.position="top")
#overall stats
summary(naturalness)
library(psych)
xt <- xtabs(~ group + score.reduced, data=naturalness)
xt
barplot(xt,
beside=TRUE,
legend=TRUE,
ylim=c(0, 5),  # adjust to remove legend overlap
xlab="Likert score",
ylab="Frequency")
xt <- xtabs(~ group + score.reduced, data=naturalness)
xt
desc.stats <- naturalness %>%
filter(group == "original") %>%
group_by(question) %>%
summarise(med.o = median(score))
desc.stats <- cbind(desc.stats, naturalness %>%
filter(group == "translated") %>%
group_by(question) %>%
summarise(med.t = median(score)) %>%
select(med.t))
desc.stats <- desc.stats %>%
mutate(diff = med.o-med.t)
desc.stats
#Barplot of differences between medians per question
barplot(desc.stats$diff,
col="dark gray",
xlab="Observation",
ylab="Difference (Median Original – Median Translated)")
library(ordinal)
library(car)
library(car)
library(RVAideMemoire)
library(emmeans)
nat <- naturalness %>%
filter(item=="well.written") %>%
select(-item)
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model)
Anova(model)
nat <- naturalness %>%
filter(item=="meaningful") %>%
select(-item)
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model)
summary(model)
Anova(model)
nat <- naturalness %>%
filter(item=="complete") %>%
select(-item)
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model)
Anova(model)
nat <- naturalness %>%
filter(item=="natural") %>%
select(-item)
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model)
Anova(model)
nat <- naturalness
model <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model)
Anova(model)
Anova(model)
emmeans(model, pairwise ~ group, adjust="tukey")
summary(model)
model <- clmm(score.reduced ~ group + item + (1|group:question) + (1|pid),
data = nat)
summary(model)
summary(model)
#emmeans(model, pairwise ~ group + item, adjust="tukey")
emmeans(model, pairwise ~ group + item, adjust="tukey")
library(ordinal)
library(car)
library(RVAideMemoire)
library(emmeans)
nat <- naturalness %>%
filter(item=="natural") %>%
select(-item)
well.wr <- naturalness %>%
filter(item=="well.written") %>%
select(-item)
meaning <- naturalness %>%
filter(item=="meaningful") %>%
select(-item)
complete <- naturalness %>%
filter(item=="complete") %>%
select(-item)
model.nat <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model.nat)
model.well.wr <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = well.wr)
summary(model.well.wr)
model.meaning <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = meaning)
summary(model.meaning)
model.complete <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = complete)
summary(model.complete)
model.nat <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = nat)
summary(model.nat)
model.well.wr <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = well.wr)
summary(model.well.wr)
model.meaning <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = meaning)
summary(model.meaning)
model.complete <- clmm(score.reduced ~ group + (1|group:question) + (1|pid),
data = complete)
summary(model.complete)
